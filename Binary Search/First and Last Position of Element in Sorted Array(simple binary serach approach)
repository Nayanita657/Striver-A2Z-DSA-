class Solution {
public:

    int get_first(vector<int>& nums, int n, int target)
    {
        int low = 0;
        int high = n - 1;
        int ans = -1;
        while(low <= high)
        {
            int mid = (low + high) / 2;
            if(nums[mid] == target)
            {
                ans = mid;
                high = mid - 1;
            }
            else if(nums[mid] > target)
                high = mid - 1;
            else
                low = mid + 1;
        }
        return ans;
    }

    int get_last(vector<int>& nums, int n, int target)
    {
        int low = 0;
        int high = n - 1;
        int ans = -1;
        while(low <= high)
        {
            int mid = (low + high) / 2;
            if(nums[mid] == target)
            {
                ans = mid;
                low = mid + 1;
            }
            else if(nums[mid] > target)
                high = mid - 1;
            else
                low = mid + 1;
        }
        return ans;
    }
    
    vector<int> searchRange(vector<int>& nums, int target) 
    {
        int n = nums.size();
        vector<int> result;
        int first = get_first(nums, n, target);
        if(first == -1)
        {
            result.push_back(first);
            result.push_back(-1);

        }
        else
        {
            int last = get_last(nums, n, target);
            result.push_back(first);
            result.push_back(last);
        }
        return result;
    }
};

TC = 2 * O(logn)
SC = O(1)
